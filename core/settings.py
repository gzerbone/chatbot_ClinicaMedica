"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import logging
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-le135!_9$^gz#fscc)$l_*)#476!r^uxn($+^!^hebdhp=^j7w')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = [
    'localhost',          # Permite acesso via localhost
    '127.0.0.1',        # Permite acesso via o endereço de loopback
    '.ngrok-free.app',  # Permite QUALQUER endereço que termine com .ngrok-free.app
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rag_agent',
    'api_gateway',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'api_gateway.middleware.WhatsAppWebhookCSRFExemptMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api_gateway.middleware.RequestLoggingMiddleware',
]

# Configurações de logging para desenvolvimento
class ColoredFormatter(logging.Formatter):
    """
    Formatador colorido para logs no terminal
    """

    # Cores ANSI
    COLORS = {
        'DEBUG': '\033[36m',      # Cyan
        'INFO': '\033[32m',       # Verde
        'WARNING': '\033[33m',    # Amarelo
        'ERROR': '\033[31m',      # Vermelho
        'CRITICAL': '\033[35m',   # Magenta
    }
    RESET = '\033[0m'  # Reset

    def format(self, record):
        # Adicionar cor baseada no nível
        color = self.COLORS.get(record.levelname, self.RESET)
        record.levelname = f"{color}{record.levelname}{self.RESET}"

        # Formatação customizada para diferentes tipos de log
        if hasattr(record, 'agent'):
            record.levelname = f"{color}[{record.agent.upper()}]{self.RESET}"
        elif hasattr(record, 'phone_number'):
            record.levelname = f"{color}[{record.phone_number}]{self.RESET}"

        return super().format(record)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'colored',
        },
    },
    'formatters': {
        'colored': {
            '()': ColoredFormatter,
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            'datefmt': '%H:%M:%S'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'api_gateway': {
            'handlers': ['console'],
            'level': 'INFO',  # Reduzido de DEBUG para menos verbosidade
            'propagate': False,
        },
        'flow_agent': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'rag_agent': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'conversation': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configurações do Gemini AI
GEMINI_API_KEY = config('GEMINI_API_KEY', default='')
GEMINI_ENABLED = config('GEMINI_ENABLED', default=True, cast=bool)
GEMINI_MODEL = config('GEMINI_MODEL', default='gemini-2.0-flash')
GEMINI_TEMPERATURE = config('GEMINI_TEMPERATURE', default=0.7, cast=float)
GEMINI_MAX_TOKENS = config('GEMINI_MAX_TOKENS', default=1024, cast=int)

# Configurações do WhatsApp API
WHATSAPP_ACCESS_TOKEN = config('WHATSAPP_ACCESS_TOKEN', default='')
WHATSAPP_VERIFY_TOKEN = config('WHATSAPP_VERIFY_TOKEN', default='meu_verify_token_123')
WHATSAPP_PHONE_NUMBER_ID = config('WHATSAPP_PHONE_NUMBER_ID', default='')
WHATSAPP_API_URL = config('WHATSAPP_API_URL', default='https://graph.facebook.com/v18.0')

# Número da clínica para handoff (formato: 5511999999999)
CLINIC_WHATSAPP_NUMBER = config('CLINIC_WHATSAPP_NUMBER', default='5511999999999')

# Configurações do Google Calendar API
GOOGLE_CALENDAR_ENABLED = config('GOOGLE_CALENDAR_ENABLED', default=False, cast=bool)
GOOGLE_SERVICE_ACCOUNT_FILE = config('GOOGLE_SERVICE_ACCOUNT_FILE', default='')
CLINIC_DOMAIN = config('CLINIC_DOMAIN', default='clinica.com')

# Calendário único da clínica (controlado pela secretária)
CLINIC_CALENDAR_ID = config('CLINIC_CALENDAR_ID', default='agenda@clinica.com')

# Padrões de eventos para identificar médicos no calendário único
# Formato esperado: "Dr. João - Consulta", "Dra. Maria - Exame", etc.
DOCTOR_EVENT_PATTERNS = {
    'dr. joao carvalho': ['dr. joao', 'dr joao', 'joao carvalho', 'carvalho'],
    'dra. maria santos': ['dra. maria', 'dra maria', 'maria santos', 'santos'],
    # Adicionar mais médicos conforme necessário
}

# Configurações de CORS para desenvolvimento
CORS_ALLOW_ALL_ORIGINS = True  # Apenas para desenvolvimento
CORS_ALLOWED_ORIGINS = [
    "https://localhost:3000",
    "http://localhost:3000",
]
