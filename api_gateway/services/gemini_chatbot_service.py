"""
Servi√ßo Gemini Centralizado - Protagonista Principal do Chatbot
Gerencia todo o fluxo de conversa√ß√£o e responde pacientes com base no RAG
"""
import json
import logging
from typing import Any, Dict, List, Optional, Tuple

import google.generativeai as genai
from django.conf import settings
from django.core.cache import cache
from django.utils import timezone

from .rag_service import RAGService
from .smart_scheduling_service import smart_scheduling_service

logger = logging.getLogger(__name__)


class GeminiChatbotService:
    """
    Servi√ßo Gemini Centralizado - Protagonista Principal do Chatbot
    
    Este servi√ßo √© respons√°vel por:
    1. Gerenciar todo o fluxo de conversa√ß√£o
    2. Identificar inten√ß√µes e estados da conversa
    3. Responder pacientes com base nas informa√ß√µes do RAG
    4. Coordenar pr√©-agendamentos e informa√ß√µes da cl√≠nica
    """
    
    def __init__(self):
        self.api_key = getattr(settings, 'GEMINI_API_KEY', '')
        self.enabled = getattr(settings, 'GEMINI_ENABLED', True)
        
        if not self.api_key:
            logger.warning("GEMINI_API_KEY n√£o configurada nas settings")
            self.enabled = False
        
        if not self.enabled:
            logger.warning("Gemini AI est√° desabilitado nas configura√ß√µes")
            return
        
        # Configurar o Gemini
        try:
            genai.configure(api_key=self.api_key)
            model_name = getattr(settings, 'GEMINI_MODEL', 'gemini-2.0-flash')
            self.model = genai.GenerativeModel(model_name)
            
            # Configura√ß√µes de gera√ß√£o
            self.generation_config = {
                "temperature": 0.7,
                "top_p": 0.8,
                "top_k": 40,
                "max_output_tokens": 1024,
            }
            
            logger.info("‚úÖ Gemini Chatbot Service inicializado com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar Gemini: {e}")
            self.enabled = False
    
    def process_message(self, phone_number: str, message: str) -> Dict[str, Any]:
        """
        Processa mensagem do usu√°rio usando o Gemini como protagonista principal
        
        Args:
            phone_number: N√∫mero do telefone do usu√°rio
            message: Mensagem do usu√°rio
            
        Returns:
            Dict com resposta e informa√ß√µes do processamento
        """
        try:
            if not self.enabled:
                return self._get_fallback_response(message)
            
            # Obter sess√£o da conversa
            session = self._get_or_create_session(phone_number)
            
            # Obter dados da cl√≠nica
            clinic_data = RAGService.get_all_clinic_data()
            
            # Obter hist√≥rico da conversa
            conversation_history = self._get_conversation_history(phone_number)
            
            # Verificar se √© solicita√ß√£o de hor√°rios
            if self._is_scheduling_request(message):
                # Usar servi√ßo de consulta de hor√°rios
                scheduling_result = smart_scheduling_service.analyze_scheduling_request(message, session)
                analysis_result = self._convert_scheduling_to_gemini_format(scheduling_result)
                response_result = {
                    'response': scheduling_result['message'],
                    'intent': 'buscar_horarios',
                    'confidence': 0.9
                }
            else:
                # Usar Gemini para outras solicita√ß√µes
                analysis_result = self._analyze_message_with_gemini(
                    message, session, conversation_history, clinic_data
                )

                response_result = self._generate_response_with_gemini(
                    message, analysis_result, session, conversation_history, clinic_data
                )
            
            # Verificar se √© confirma√ß√£o de agendamento e gerar handoff
            if analysis_result['intent'] == 'confirmar_agendamento':
                handoff_result = self._handle_appointment_confirmation(phone_number, session, analysis_result)
                if handoff_result:
                    response_result['response'] = handoff_result['message']
                    response_result['handoff_link'] = handoff_result['handoff_link']
            
            # Atualizar sess√£o
            self._update_session(phone_number, session, analysis_result, response_result)
            
            # Salvar mensagens no hist√≥rico com entidades
            self._save_conversation_messages(phone_number, message, response_result['response'], analysis_result)
            
            logger.info(f"ü§ñ [{analysis_result['intent'].upper()}] {analysis_result['confidence']:.2f} - {response_result['response'][:100]}...")
            
            return {
                'response': response_result['response'],
                'intent': analysis_result['intent'],
                'confidence': analysis_result['confidence'],
                'state': session['current_state'],
                'session_data': session,
                'analysis': analysis_result,
                'agent': 'gemini'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro no processamento da mensagem: {e}")
            return self._get_fallback_response(message)
    
    def _analyze_message_with_gemini(self, message: str, session: Dict, 
                                   conversation_history: List, clinic_data: Dict) -> Dict[str, Any]:
        """
        Analisa mensagem usando Gemini para identificar inten√ß√£o e estado da conversa
        """
        try:
            # Construir prompt de an√°lise
            analysis_prompt = self._build_analysis_prompt(
                message, session, conversation_history, clinic_data
            )
            
            # Gerar an√°lise com Gemini
            response = self.model.generate_content(
                analysis_prompt,
                generation_config={
                    "temperature": 0.1,  # Baixa temperatura para an√°lise mais determin√≠stica
                    "top_p": 0.8,
                    "top_k": 20,
                    "max_output_tokens": 300
                }
            )
            
            # Extrair an√°lise da resposta
            analysis_result = self._extract_analysis_from_response(response.text)
            analysis_result['original_message'] = message  # Adicionar mensagem original para fallback
            
            return analysis_result
            
        except Exception as e:
            logger.error(f"Erro na an√°lise com Gemini: {e}")
            return self._get_fallback_analysis(message, session)
    
    def _generate_response_with_gemini(self, message: str, analysis_result: Dict,
                                     session: Dict, conversation_history: List,
                                     clinic_data: Dict) -> Dict[str, Any]:
        """
        Gera resposta usando Gemini baseada na an√°lise e contexto
        """
        try:
            # Construir prompt de resposta
            response_prompt = self._build_response_prompt(
                message, analysis_result, session, conversation_history, clinic_data
            )
            
            # Gerar resposta com Gemini
            response = self.model.generate_content(
                response_prompt,
                generation_config=self.generation_config
            )
            
            return {
                'response': response.text.strip(),
                'intent': analysis_result['intent'],
                'confidence': analysis_result['confidence']
            }
            
        except Exception as e:
            logger.error(f"Erro na gera√ß√£o de resposta com Gemini: {e}")
            return self._get_fallback_response(message)
    
    def _build_analysis_prompt(self, message: str, session: Dict, 
                             conversation_history: List, clinic_data: Dict) -> str:
        """
        Constr√≥i prompt para an√°lise da mensagem
        """
        # Informa√ß√µes da cl√≠nica
        clinic_info = clinic_data.get('clinica_info', {})
        medicos = clinic_data.get('medicos', [])
        especialidades = clinic_data.get('especialidades', [])
        
        # Estado atual da sess√£o
        current_state = session.get('current_state', 'idle')
        patient_name = session.get('patient_name')
        selected_doctor = session.get('selected_doctor')
        
        # Hist√≥rico da conversa
        history_text = ""
        if conversation_history:
            history_text = "Hist√≥rico da conversa:\n"
            for msg in conversation_history[-3:]:  # √öltimas 3 mensagens
                role = "Paciente" if msg['is_user'] else "Assistente"
                history_text += f"- {role}: {msg['content']}\n"
        
        prompt = f"""Voc√™ √© um assistente virtual especializado da {clinic_info.get('nome', 'cl√≠nica m√©dica')}.

AN√ÅLISE DA MENSAGEM:
Mensagem do paciente: "{message}"

CONTEXTO ATUAL:
- Estado da conversa: {current_state}
- Nome do paciente: {patient_name or 'N√£o informado'}
- M√©dico selecionado: {selected_doctor or 'N√£o selecionado'}

{history_text}

INFORMA√á√ïES DA CL√çNICA:
- Nome: {clinic_info.get('nome', 'Cl√≠nica M√©dica')}
- Especialidades: {', '.join([esp['nome'] for esp in especialidades[:5]])}
- M√©dicos: {', '.join([med['nome'] for med in medicos[:3]])}

AN√ÅLISE NECESS√ÅRIA:
Analise a mensagem e determine:

EXEMPLOS DE EXTRA√á√ÉO DE ENTIDADES:
- "Meu nome √© Jo√£o Silva" ‚Üí nome_paciente: "Jo√£o Silva"
- "Quero agendar com Dr. Jo√£o Carvalho" ‚Üí medico: "Dr. Jo√£o Carvalho"
- "Quero agendar para segunda-feira √†s 14h" ‚Üí data: "segunda-feira", horario: "14:00"
- "Preciso de um cardiologista" ‚Üí especialidade: "cardiologia"
- "Quero fazer um hemograma" ‚Üí exame: "hemograma"

1. INTEN√á√ÉO PRINCIPAL (uma das op√ß√µes abaixo):
   - saudacao: Cumprimentos, oi, ol√°, bom dia
   - buscar_info: Perguntas sobre cl√≠nica, m√©dicos, exames, pre√ßos, endere√ßo
   - agendar_consulta: Quero agendar, marcar consulta, agendamento
   - confirmar_agendamento: Confirmar dados, sim, est√° correto
   - cancelar_agendamento: Cancelar, desmarcar, n√£o posso mais
   - buscar_medico: Quais m√©dicos, m√©dico espec√≠fico, especialidade
   - buscar_exame: Exames dispon√≠veis, procedimentos
   - buscar_horarios: Hor√°rios dispon√≠veis, quando atende
   - despedida: Tchau, obrigado, at√© logo
   - duvida: N√£o entendi, pode repetir, ajuda

2. PR√ìXIMO ESTADO DA CONVERSA:
   - idle: Estado inicial
   - coletando_nome: Coletando nome do paciente
   - confirmando_nome: Confirmando nome extra√≠do
   - selecionando_medico: Escolhendo m√©dico
   - escolhendo_horario: Escolhendo data/hor√°rio
   - confirmando_agendamento: Confirmando dados finais
   - agendamento_concluido: Processo finalizado
   - fornecendo_info: Fornecendo informa√ß√µes solicitadas

3. ENTIDADES EXTRA√çDAS (EXTRAIA SEMPRE QUE POSS√çVEL):
   - nome_paciente: Nome completo do paciente (ex: "Jo√£o Silva", "Maria Santos")
   - medico: Nome do m√©dico mencionado (ex: "Dr. Jo√£o", "Dra. Ana", "Jo√£o Carvalho")
   - especialidade: Especialidade m√©dica (ex: "cardiologia", "dermatologia", "pediatria")
   - data: Data em formato DD/MM/YYYY ou texto (ex: "15/09/2024", "segunda-feira", "amanh√£")
   - horario: Hor√°rio em formato HH:MM ou texto (ex: "14:30", "2h30", "2 da tarde")
   - exame: Nome do exame mencionado (ex: "hemograma", "raio-x", "ultrassom")

IMPORTANTE: Se a mensagem cont√©m informa√ß√µes como nome, m√©dico, data ou hor√°rio, EXTRAIA essas informa√ß√µes mesmo que j√° estejam na sess√£o anterior. O paciente pode estar corrigindo ou confirmando dados.

4. CONFIAN√áA: N√≠vel de confian√ßa na an√°lise (0.0 a 1.0)

INSTRU√á√ïES PARA EXTRA√á√ÉO DE ENTIDADES:
- Se encontrar um nome (ex: "Jo√£o Silva"), coloque em "nome_paciente"
- Se encontrar m√©dico (ex: "Dr. Jo√£o"), coloque em "medico"  
- Se encontrar data (ex: "15/09", "segunda"), coloque em "data"
- Se encontrar hor√°rio (ex: "14h", "2 da tarde"), coloque em "horario"
- Se encontrar especialidade (ex: "cardiologia"), coloque em "especialidade"
- Se encontrar exame (ex: "hemograma"), coloque em "exame"
- Se N√ÉO encontrar a informa√ß√£o, use null

Responda APENAS com um JSON v√°lido no formato:
{{
    "intent": "inten√ß√£o_detectada",
    "next_state": "pr√≥ximo_estado",
    "entities": {{
        "nome_paciente": "nome_extra√≠do_ou_null",
        "medico": "m√©dico_extra√≠do_ou_null",
        "especialidade": "especialidade_extra√≠da_ou_null",
        "data": "data_extra√≠da_ou_null",
        "horario": "hor√°rio_extra√≠do_ou_null",
        "exame": "exame_extra√≠do_ou_null"
    }},
    "confidence": 0.95,
    "reasoning": "Explica√ß√£o breve da an√°lise"
}}"""
        
        return prompt
    
    def _build_response_prompt(self, message: str, analysis_result: Dict,
                             session: Dict, conversation_history: List,
                             clinic_data: Dict) -> str:
        """
        Constr√≥i prompt para gera√ß√£o de resposta
        """
        intent = analysis_result['intent']
        entities = analysis_result['entities']
        next_state = analysis_result['next_state']
        
        # Informa√ß√µes da cl√≠nica
        clinic_info = clinic_data.get('clinica_info', {})
        medicos = clinic_data.get('medicos', [])
        especialidades = clinic_data.get('especialidades', [])
        exames = clinic_data.get('exames', [])
        
        # Estado atual da sess√£o
        current_state = session.get('current_state', 'idle')
        patient_name = session.get('patient_name')
        selected_doctor = session.get('selected_doctor')
        
        prompt = f"""Voc√™ √© um assistente virtual especializado da {clinic_info.get('nome', 'cl√≠nica m√©dica')}.

CONTEXTO DA CONVERSA:
- Estado atual: {current_state}
- Pr√≥ximo estado: {next_state}
- Inten√ß√£o detectada: {intent}
- Nome do paciente: {patient_name or 'N√£o informado'}
- M√©dico selecionado: {selected_doctor or 'N√£o selecionado'}

MENSAGEM DO PACIENTE: "{message}"

INFORMA√á√ïES DA CL√çNICA:
- Nome: {clinic_info.get('nome', 'Cl√≠nica M√©dica')}
- Endere√ßo: {clinic_info.get('endereco', 'Endere√ßo n√£o informado')}
- Telefone: {clinic_info.get('telefone_contato', 'Telefone n√£o informado')}
- WhatsApp: {clinic_info.get('whatsapp_contato', 'WhatsApp n√£o informado')}

M√âDICOS DISPON√çVEIS:
{self._format_medicos_for_prompt(medicos)}

ESPECIALIDADES:
{self._format_especialidades_for_prompt(especialidades)}

EXAMES DISPON√çVEIS:
{self._format_exames_for_prompt(exames)}

INSTRU√á√ïES ESPEC√çFICAS PARA INTEN√á√ÉO "{intent}":
{self._get_intent_instructions(intent)}

REGRAS IMPORTANTES:
1. Seja sempre cordial, profissional e prestativo
2. Use emojis moderadamente para tornar a conversa mais amig√°vel
3. Mantenha respostas concisas e diretas
4. N√ÉO mencione telefone ou WhatsApp a menos que o paciente pe√ßa especificamente
5. Foque apenas no que o paciente perguntou
6. Se n√£o souber algo espec√≠fico, oriente o paciente a entrar em contato
7. Use linguagem clara e acess√≠vel
8. Mantenha o foco em sa√∫de e bem-estar

Gere uma resposta apropriada para a inten√ß√£o "{intent}" considerando o contexto atual da conversa."""
        
        return prompt
    
    def _extract_analysis_from_response(self, response_text: str) -> Dict[str, Any]:
        """
        Extrai an√°lise da resposta do Gemini
        """
        try:
            # Limpar resposta
            if "```json" in response_text:
                response_text = response_text.split("```json")[1].split("```")[0].strip()
            elif "```" in response_text:
                response_text = response_text.split("```")[1].strip()
            
            # Parsear JSON
            analysis = json.loads(response_text)
            
            # Validar campos obrigat√≥rios
            required_fields = ['intent', 'next_state', 'entities', 'confidence']
            for field in required_fields:
                if field not in analysis:
                    raise ValueError(f"Campo obrigat√≥rio '{field}' n√£o encontrado")
            
            # Validar entidades
            if not isinstance(analysis['entities'], dict):
                analysis['entities'] = {}
            
            # Limpar entidades de valores "null" ou vazios
            cleaned_entities = {}
            for key, value in analysis['entities'].items():
                if value and str(value).lower() not in ['null', 'none', '']:
                    cleaned_entities[key] = str(value).strip()
            
            # Se n√£o conseguiu extrair entidades, tentar com regex
            if not cleaned_entities:
                cleaned_entities = self._extract_entities_with_regex(analysis.get('original_message', ''))
                logger.info(f"üîÑ Fallback regex extraiu: {cleaned_entities}")
            
            analysis['entities'] = cleaned_entities
            
            # Validar confian√ßa
            confidence = float(analysis.get('confidence', 0.5))
            if not 0.0 <= confidence <= 1.0:
                confidence = 0.5
            
            analysis['confidence'] = confidence
            
            return analysis
            
        except (json.JSONDecodeError, ValueError, TypeError) as e:
            logger.warning(f"Erro ao parsear an√°lise do Gemini: {e}")
            return self._get_fallback_analysis("", {})
    
    def _get_intent_instructions(self, intent: str) -> str:
        """
        Retorna instru√ß√µes espec√≠ficas para cada inten√ß√£o
        """
        instructions = {
            'saudacao': """
            - Cumprimente calorosamente o paciente
            - Apresente-se como assistente da cl√≠nica
            - Pergunte como pode ajudar
            - Se for primeira intera√ß√£o, inicie coleta do nome
            """,
            
            'buscar_info': """
            - Forne√ßa APENAS as informa√ß√µes espec√≠ficas que o paciente perguntou
            - Se perguntar sobre endere√ßo, forne√ßa apenas o endere√ßo
            - Se perguntar sobre telefone, forne√ßa apenas o telefone
            - Se perguntar sobre hor√°rios, forne√ßa apenas os hor√°rios
            - Se perguntar sobre conv√™nios, liste apenas os conv√™nios aceitos
            - N√ÉO forne√ßa informa√ß√µes n√£o solicitadas
            """,
            
            'agendar_consulta': """
            - Guie o paciente atrav√©s do processo de agendamento
            - Se n√£o tiver o nome, solicite o nome completo primeiro
            - Se tiver o nome, prossiga para sele√ß√£o de m√©dico
            - Seja claro sobre as etapas necess√°rias
            - Mantenha o processo organizado e f√°cil
            """,
            
            'confirmar_agendamento': """
            - Verifique se tem todas as informa√ß√µes necess√°rias
            - Confirme nome, m√©dico, data e hor√°rio
            - Se estiver tudo correto, gere link de handoff
            - Oriente sobre pr√≥ximos passos
            """,
            
            'buscar_medico': """
            - Apresente os m√©dicos dispon√≠veis
            - Informe especialidades, conv√™nios aceitos e pre√ßos
            - Se houver mais de um m√©dico, pergunte qual deseja agendar
            - N√ÉO mencione telefone/WhatsApp a menos que o paciente pe√ßa
            """,
            
            'buscar_exame': """
            - Explique o que √© o exame de forma clara
            - Detalhe como funciona o procedimento
            - Mencione prepara√ß√£o necess√°ria
            - Informe pre√ßo e dura√ß√£o
            - Destaque benef√≠cios do exame
            """,
            
            'buscar_horarios': """
            - Apresente hor√°rios de forma clara
            - Considere prefer√™ncias do paciente
            - Sugira alternativas se necess√°rio
            - Facilite a escolha do hor√°rio
            """,
            
            'cancelar_agendamento': """
            - Seja compreensivo e acolhedor
            - Facilite o processo de cancelamento
            - Sugira reagendamento se apropriado
            - Mantenha a porta aberta para futuras consultas
            """,
            
            'despedida': """
            - Despe√ßa-se cordialmente
            - Reforce que est√° dispon√≠vel para ajudar
            - Deseje boa sa√∫de
            - Convide para retornar quando necess√°rio
            """,
            
            'duvida': """
            - Seja educado ao n√£o entender
            - Pe√ßa esclarecimentos de forma gentil
            - Ofere√ßa op√ß√µes de como pode ajudar
            - Mantenha o tom acolhedor
            """
        }
        
        return instructions.get(intent, instructions['duvida'])
    
    def _format_medicos_for_prompt(self, medicos: List[Dict]) -> str:
        """Formata m√©dicos para o prompt"""
        if not medicos:
            return "Nenhum m√©dico cadastrado"
        
        formatted = []
        for medico in medicos[:5]:  # Limitar a 5 m√©dicos
            nome = medico.get('nome', 'Nome n√£o informado')
            especialidades = medico.get('especialidades_display', 'Especialidade n√£o informada')
            preco = medico.get('preco_particular', 'Pre√ßo n√£o informado')
            formatted.append(f"- {nome}: {especialidades} (Particular: R$ {preco})")
        
        return "\n".join(formatted)
    
    def _format_especialidades_for_prompt(self, especialidades: List[Dict]) -> str:
        """Formata especialidades para o prompt"""
        if not especialidades:
            return "Nenhuma especialidade cadastrada"
        
        formatted = []
        for esp in especialidades[:5]:  # Limitar a 5 especialidades
            nome = esp.get('nome', 'Nome n√£o informado')
            descricao = esp.get('descricao', 'Descri√ß√£o n√£o informada')
            formatted.append(f"- {nome}: {descricao}")
        
        return "\n".join(formatted)
    
    def _format_exames_for_prompt(self, exames: List[Dict]) -> str:
        """Formata exames para o prompt"""
        if not exames:
            return "Nenhum exame cadastrado"
        
        formatted = []
        for exame in exames[:3]:  # Limitar a 3 exames
            nome = exame.get('nome', 'Nome n√£o informado')
            preco = exame.get('preco', 'Pre√ßo n√£o informado')
            duracao = exame.get('duracao_formatada', 'Dura√ß√£o n√£o informada')
            formatted.append(f"- {nome}: R$ {preco} ({duracao})")
        
        return "\n".join(formatted)
    
    def _get_or_create_session(self, phone_number: str) -> Dict[str, Any]:
        """Obt√©m ou cria sess√£o da conversa"""
        cache_key = f"gemini_session_{phone_number}"
        session = cache.get(cache_key)
        
        if not session:
            session = {
                'phone_number': phone_number,
                'current_state': 'idle',
                'patient_name': None,
                'selected_doctor': None,
                'preferred_date': None,
                'preferred_time': None,
                'insurance_type': None,
                'created_at': timezone.now().isoformat(),
                'last_activity': timezone.now().isoformat()
            }
            cache.set(cache_key, session, 3600)  # 1 hora
        
        return session
    
    def _update_session(self, phone_number: str, session: Dict, 
                       analysis_result: Dict, response_result: Dict):
        """Atualiza sess√£o com base na an√°lise e resposta"""
        try:
            # Atualizar estado
            session['current_state'] = analysis_result['next_state']
            session['last_activity'] = timezone.now().isoformat()
            
            # Atualizar entidades extra√≠das
            entities = analysis_result['entities']
            
            # Log das entidades extra√≠das para debug
            if entities:
                logger.info(f"üîç Entidades extra√≠das: {entities}")
            
            # Atualizar nome do paciente
            if entities.get('nome_paciente') and entities['nome_paciente'] != 'null':
                session['patient_name'] = entities['nome_paciente']
                logger.info(f"‚úÖ Nome atualizado: {entities['nome_paciente']}")
            
            # Atualizar m√©dico selecionado
            if entities.get('medico') and entities['medico'] != 'null':
                session['selected_doctor'] = entities['medico']
                logger.info(f"‚úÖ M√©dico atualizado: {entities['medico']}")
            
            # Atualizar data preferida
            if entities.get('data') and entities['data'] != 'null':
                session['preferred_date'] = entities['data']
                logger.info(f"‚úÖ Data atualizada: {entities['data']}")
            
            # Atualizar hor√°rio preferido
            if entities.get('horario') and entities['horario'] != 'null':
                session['preferred_time'] = entities['horario']
                logger.info(f"‚úÖ Hor√°rio atualizado: {entities['horario']}")
            
            # Salvar sess√£o
            cache_key = f"gemini_session_{phone_number}"
            cache.set(cache_key, session, 3600)
            
            # Log do estado final da sess√£o
            logger.info(f"üìã Sess√£o atualizada - Estado: {session['current_state']}, Nome: {session.get('patient_name')}, M√©dico: {session.get('selected_doctor')}")
            
            # Sincronizar com banco de dados
            self._sync_session_to_database(phone_number, session)
            
        except Exception as e:
            logger.error(f"Erro ao atualizar sess√£o: {e}")
    
    def _sync_session_to_database(self, phone_number: str, session: Dict):
        """Sincroniza sess√£o do cache com o banco de dados"""
        try:
            from api_gateway.models import ConversationSession

            # Obter ou criar sess√£o no banco
            db_session, created = ConversationSession.objects.get_or_create(
                phone_number=phone_number,
                defaults={
                    'current_state': session.get('current_state', 'idle'),
                    'patient_name': session.get('patient_name'),
                    'name_confirmed': bool(session.get('patient_name')),
                    'pending_name': None,
                    'insurance_type': session.get('insurance_type'),
                    'created_at': timezone.now(),
                    'updated_at': timezone.now()
                }
            )
            
            if not created:
                # Atualizar sess√£o existente
                db_session.current_state = session.get('current_state', 'idle')
                db_session.patient_name = session.get('patient_name')
                db_session.name_confirmed = bool(session.get('patient_name'))
                db_session.insurance_type = session.get('insurance_type')
                db_session.updated_at = timezone.now()
                db_session.save()
            
            logger.info(f"üíæ Sess√£o sincronizada com banco - ID: {db_session.id}, Nome: {db_session.patient_name}")
            
        except Exception as e:
            logger.error(f"Erro ao sincronizar sess√£o com banco: {e}")
    
    def _get_conversation_history(self, phone_number: str, limit: int = 5) -> List[Dict]:
        """Obt√©m hist√≥rico da conversa"""
        try:
            from .conversation_service import conversation_service
            return conversation_service.get_conversation_history(phone_number, limit)
        except:
            return []
    
    def _save_conversation_messages(self, phone_number: str, user_message: str, bot_response: str, 
                                   analysis_result: Dict = None):
        """Salva mensagens no hist√≥rico com entidades extra√≠das"""
        try:
            from .conversation_service import conversation_service

            # Preparar entidades para salvar no banco
            entities_to_save = {}
            if analysis_result and analysis_result.get('entities'):
                entities_to_save = analysis_result['entities']
            
            # Salvar mensagem do usu√°rio com entidades
            user_msg = conversation_service.add_message(
                phone_number, user_message, 'user',
                analysis_result.get('intent', 'user_message') if analysis_result else 'user_message',
                analysis_result.get('confidence', 1.0) if analysis_result else 1.0,
                entities_to_save
            )
            
            if user_msg:
                logger.info(f"üíæ Mensagem do usu√°rio salva no banco com ID: {user_msg.id}")
                logger.info(f"üîç Entidades salvas: {entities_to_save}")
            
            # Salvar resposta do bot
            bot_msg = conversation_service.add_message(
                phone_number, bot_response, 'bot',
                'bot_response', 1.0, {}
            )
            
            if bot_msg:
                logger.info(f"üíæ Resposta do bot salva no banco com ID: {bot_msg.id}")
            
        except Exception as e:
            logger.error(f"Erro ao salvar mensagens: {e}")
    
    def _extract_entities_with_regex(self, message: str) -> Dict[str, str]:
        """
        Extrai entidades usando regex como fallback quando o Gemini falha
        """
        import re
        entities = {}
        message_lower = message.lower()
        
        # Extrair nome do paciente
        name_patterns = [
            r'meu\s+nome\s+√©\s+([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+)*)',
            r'sou\s+([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+)*)',
            r'chamo-me\s+([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+)*)',
            r'nome\s+√©\s+([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+)*)',
            r'me\s+chamo\s+([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+)*)',
            r'^([A-Za-z√Ä-√ø]+\s+[A-Za-z√Ä-√ø]+)(?:\s|,|$)'
        ]
        
        for pattern in name_patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                # Limitar a 3 palavras (nome + sobrenome + sobrenome)
                name_parts = name.split()[:3]
                if len(name_parts) >= 2:  # Pelo menos nome e sobrenome
                    entities['nome_paciente'] = ' '.join(name_parts).title()
                    break
        
        # Extrair m√©dico
        doctor_patterns = [
            r'dr\.?\s+([A-Za-z√Ä-√ø]+)',
            r'dra\.?\s+([A-Za-z√Ä-√ø]+)',
            r'doutor\s+([A-Za-z√Ä-√ø]+)',
            r'doutora\s+([A-Za-z√Ä-√ø]+)',
            r'com\s+([A-Za-z√Ä-√ø]+)'
        ]
        
        for pattern in doctor_patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                doctor_name = match.group(0).strip()
                # Limitar a 3 palavras
                doctor_parts = doctor_name.split()[:3]
                entities['medico'] = ' '.join(doctor_parts)
                break
        
        # Extrair data
        date_patterns = [
            r'(\d{1,2})/(\d{1,2})/(\d{2,4})',
            r'(\d{1,2})/(\d{1,2})',
            r'(segunda|ter√ßa|quarta|quinta|sexta|s√°bado|domingo)',
            r'(amanh√£|hoje|depois)'
        ]
        
        for pattern in date_patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                entities['data'] = match.group(0).strip()
                break
        
        # Extrair hor√°rio
        time_patterns = [
            r'(\d{1,2}):(\d{2})',
            r'(\d{1,2})h(\d{2})?',
            r'(\d{1,2})\s+da\s+(manh√£|tarde|noite)'
        ]
        
        for pattern in time_patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                entities['horario'] = match.group(0).strip()
                break
        
        return entities
    
    def _get_fallback_analysis(self, message: str, session: Dict) -> Dict[str, Any]:
        """An√°lise de fallback quando Gemini n√£o est√° dispon√≠vel"""
        message_lower = message.lower()
        
        # An√°lise simples baseada em palavras-chave
        if any(word in message_lower for word in ['oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite']):
            intent = 'saudacao'
            next_state = 'coletando_nome'
        elif any(word in message_lower for word in ['agendar', 'marcar', 'consulta', 'hor√°rio']):
            intent = 'agendar_consulta'
            next_state = 'coletando_nome'
        elif any(word in message_lower for word in ['m√©dico', 'medicos', 'doutor', 'doutora']):
            intent = 'buscar_medico'
            next_state = 'fornecendo_info'
        elif any(word in message_lower for word in ['exame', 'exames', 'procedimento']):
            intent = 'buscar_exame'
            next_state = 'fornecendo_info'
        elif any(word in message_lower for word in ['endere√ßo', 'endereco', 'telefone', 'contato']):
            intent = 'buscar_info'
            next_state = 'fornecendo_info'
        else:
            intent = 'duvida'
            next_state = session.get('current_state', 'idle')

        # Tentar extrair entidades com regex como fallback
        entities = self._extract_entities_with_regex(message)
        logger.info(f"üîÑ Fallback extraiu entidades: {entities}")

        return {
            'intent': intent,
            'next_state': next_state,
            'entities': entities,
            'confidence': 0.6,
            'reasoning': 'An√°lise de fallback baseada em palavras-chave e regex'
        }
    
    def _get_fallback_response(self, message: str) -> Dict[str, Any]:
        """Resposta de fallback quando Gemini n√£o est√° dispon√≠vel"""
        return {
            'response': "Desculpe, estou temporariamente indispon√≠vel. Como posso ajud√°-lo?",
            'intent': 'duvida',
            'confidence': 0.5,
            'state': 'idle',
            'session_data': {},
            'analysis': {'intent': 'duvida', 'confidence': 0.5},
            'agent': 'fallback'
        }
    
    def _is_scheduling_request(self, message: str) -> bool:
        """
        Verifica se a mensagem √© uma solicita√ß√£o de hor√°rios/agendamento
        
        Args:
            message: Mensagem do usu√°rio
            
        Returns:
            True se for solicita√ß√£o de hor√°rios
        """
        message_lower = message.lower()
        
        # Palavras-chave que indicam solicita√ß√£o de hor√°rios
        scheduling_keywords = [
            'hor√°rio', 'horarios', 'hor√°rios',
            'agendar', 'marcar', 'consulta',
            'dispon√≠vel', 'disponivel', 'disponibilidade',
            'quando', 'que horas', 'que hora',
            'manh√£', 'manha', 'tarde', 'noite',
            'segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta',
            's√°bado', 'sabado', 'domingo',
            'amanh√£', 'amanha', 'hoje', 'depois'
        ]
        
        # Verificar se cont√©m palavras-chave de agendamento
        for keyword in scheduling_keywords:
            if keyword in message_lower:
                return True
        
        return False
    
    def _convert_scheduling_to_gemini_format(self, scheduling_result: Dict) -> Dict[str, Any]:
        """
        Converte resultado do smart_scheduling_service para formato do Gemini
        
        Args:
            scheduling_result: Resultado do smart_scheduling_service
            
        Returns:
            Dict no formato esperado pelo Gemini
        """
        return {
            'intent': 'buscar_horarios',
            'next_state': 'fornecendo_info',
            'entities': scheduling_result.get('entities', {}),
            'confidence': 0.9,
            'reasoning': 'An√°lise de hor√°rios via smart_scheduling_service'
        }
    
    def _handle_appointment_confirmation(self, phone_number: str, session: Dict, analysis_result: Dict) -> Optional[Dict]:
        """
        Processa confirma√ß√£o de agendamento e gera handoff
        
        Args:
            phone_number: N√∫mero do telefone
            session: Sess√£o da conversa
            analysis_result: Resultado da an√°lise
            
        Returns:
            Dict com mensagem e link de handoff ou None
        """
        try:
            # Obter informa√ß√µes da sess√£o e entidades
            entities = analysis_result.get('entities', {})
            
            # Extrair informa√ß√µes das entidades com fallbacks
            patient_name = entities.get('nome_paciente') or session.get('patient_name') or 'Paciente'
            doctor_name = entities.get('medico') or session.get('selected_doctor') or 'M√©dico'
            date_mentioned = entities.get('data') or session.get('preferred_date') or 'Data a definir'
            time_mentioned = entities.get('horario') or session.get('preferred_time') or 'Hor√°rio a definir'
            
            # Gerar link de handoff
            from .handoff_service import handoff_service
            
            handoff_link = handoff_service.generate_appointment_handoff_link(
                patient_name=patient_name,
                doctor_name=doctor_name,
                date=date_mentioned,
                time=time_mentioned,
                appointment_type='Consulta'
            )
            
            # Criar mensagem de confirma√ß√£o com link
            confirmation_message = f"""‚úÖ **Perfeito, {patient_name}! Vamos confirmar seu agendamento:**

üìã **RESUMO:**
üë§ Paciente: {patient_name}
üë®‚Äç‚öïÔ∏è M√©dico: {doctor_name}
üíº Tipo de Consulta: {appointment_type}
üìÖ Data: {date_mentioned}
üïê Hor√°rio: {time_mentioned}

**üîÑ Para FINALIZAR o agendamento:**
üë©‚Äçüíº Nossa secret√°ria validar√° a disponibilidade e confirmar√° seu agendamento atrav√©s do link abaixo.

**üìû Clique no link abaixo para falar diretamente com nossa equipe:**
{handoff_link}"""
            
            return {
                'message': confirmation_message,
                'handoff_link': handoff_link
            }
            
        except Exception as e:
            logger.error(f"Erro ao gerar handoff: {e}")
            return None
    
    def test_connection(self) -> bool:
        """Testa conex√£o com Gemini"""
        if not self.enabled:
            return False
        
        try:
            test_response = self.model.generate_content(
                "Teste de conex√£o. Responda apenas 'OK'.",
                generation_config={"max_output_tokens": 10}
            )
            return "ok" in test_response.text.lower()
        except Exception as e:
            logger.error(f"Erro ao testar conex√£o com Gemini: {e}")
            return False


# Inst√¢ncia global do servi√ßo
gemini_chatbot_service = GeminiChatbotService()
