#!/usr/bin/env python
"""
Script para auxiliar na configura√ß√£o do Google Calendar para desenvolvimento
"""
import json
import os
from pathlib import Path


def check_service_account_file():
    """Verifica se o arquivo de conta de servi√ßo existe"""
    service_file = Path('service-account-key.json')
    
    if not service_file.exists():
        print("‚ùå Arquivo service-account-key.json n√£o encontrado!")
        print("\nüìã Para criar o arquivo:")
        print("1. Acesse https://console.cloud.google.com")
        print("2. Crie um projeto (ex: chatbot-clinica-teste)")
        print("3. Habilite Google Calendar API")
        print("4. Crie conta de servi√ßo")
        print("5. Baixe chave JSON e renomeie para 'service-account-key.json'")
        print("6. Coloque na pasta do projeto")
        return False
    
    try:
        with open(service_file, 'r') as f:
            data = json.load(f)
        
        client_email = data.get('client_email', '')
        project_id = data.get('project_id', '')
        
        print("‚úÖ Arquivo service-account-key.json encontrado!")
        print(f"   üìß Email da conta: {client_email}")
        print(f"   üèóÔ∏è Projeto: {project_id}")
        
        return True, client_email
        
    except Exception as e:
        print(f"‚ùå Erro ao ler arquivo: {e}")
        return False


def check_env_file():
    """Verifica configura√ß√£o do arquivo .env"""
    env_file = Path('.env')
    
    if not env_file.exists():
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("üìã Copie env_example.txt para .env e configure")
        return False
    
    try:
        with open(env_file, 'r') as f:
            content = f.read()
        
        config_checks = {
            'GOOGLE_CALENDAR_ENABLED': 'GOOGLE_CALENDAR_ENABLED=True' in content,
            'CLINIC_CALENDAR_ID': 'CLINIC_CALENDAR_ID=' in content and 'seu_calendar_id_aqui' not in content,
            'SERVICE_ACCOUNT_FILE': 'GOOGLE_SERVICE_ACCOUNT_FILE=service-account-key.json' in content
        }
        
        print("üìã Verifica√ß√£o do arquivo .env:")
        for key, status in config_checks.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"   {status_icon} {key}: {'Configurado' if status else 'Precisa configurar'}")
        
        all_configured = all(config_checks.values())
        
        if not all_configured:
            print("\nüîß Para corrigir:")
            if not config_checks['GOOGLE_CALENDAR_ENABLED']:
                print("   - Defina GOOGLE_CALENDAR_ENABLED=True")
            if not config_checks['CLINIC_CALENDAR_ID']:
                print("   - Configure CLINIC_CALENDAR_ID com o ID do seu calend√°rio")
            if not config_checks['SERVICE_ACCOUNT_FILE']:
                print("   - Defina GOOGLE_SERVICE_ACCOUNT_FILE=service-account-key.json")
        
        return all_configured
        
    except Exception as e:
        print(f"‚ùå Erro ao ler .env: {e}")
        return False


def generate_calendar_instructions(client_email):
    """Gera instru√ß√µes espec√≠ficas para compartilhar calend√°rio"""
    print("\nüìÖ INSTRU√á√ïES PARA CONFIGURAR SEU CALEND√ÅRIO:")
    print("=" * 60)
    
    print("\n1Ô∏è‚É£ CRIAR CALEND√ÅRIO:")
    print("   ‚Ä¢ Acesse https://calendar.google.com")
    print("   ‚Ä¢ Fa√ßa login com gzerbone@gmail.com")
    print("   ‚Ä¢ Clique no '+' ao lado de 'Outros calend√°rios'")
    print("   ‚Ä¢ Selecione 'Criar novo calend√°rio'")
    print("   ‚Ä¢ Nome: 'Agenda Cl√≠nica Teste'")
    print("   ‚Ä¢ Clique 'Criar calend√°rio'")
    
    print("\n2Ô∏è‚É£ OBTER CALENDAR ID:")
    print("   ‚Ä¢ No calend√°rio criado, clique nos 3 pontos")
    print("   ‚Ä¢ Selecione 'Configura√ß√µes e compartilhamento'")
    print("   ‚Ä¢ Role at√© 'Integrar calend√°rio'")
    print("   ‚Ä¢ COPIE o 'ID do calend√°rio'")
    print("   ‚Ä¢ Exemplo: c_1a2b3c4d@group.calendar.google.com")
    
    print("\n3Ô∏è‚É£ COMPARTILHAR COM CONTA DE SERVI√áO:")
    print("   ‚Ä¢ Na mesma tela, v√° em 'Compartilhar com pessoas espec√≠ficas'")
    print("   ‚Ä¢ Clique '+ Adicionar pessoas'")
    print(f"   ‚Ä¢ Email: {client_email}")
    print("   ‚Ä¢ Permiss√£o: 'Ver todos os detalhes do evento'")
    print("   ‚Ä¢ Clique 'Enviar'")
    
    print("\n4Ô∏è‚É£ CONFIGURAR .env:")
    print("   ‚Ä¢ Abra o arquivo .env")
    print("   ‚Ä¢ Encontre CLINIC_CALENDAR_ID=")
    print("   ‚Ä¢ Substitua pelo ID copiado no passo 2")
    print("   ‚Ä¢ Salve o arquivo")
    
    print("\n5Ô∏è‚É£ CRIAR EVENTOS DE TESTE:")
    print("   ‚Ä¢ No Google Calendar, crie alguns eventos:")
    print("   ‚Ä¢ 'Dr. Jo√£o Carvalho - Consulta' (amanh√£ 09:00)")
    print("   ‚Ä¢ 'Dr. Jo√£o Carvalho - Retorno' (amanh√£ 14:00)")
    print("   ‚Ä¢ 'Dra. Maria Santos - Consulta' (amanh√£ 15:30)")


def main():
    """Fun√ß√£o principal do script de setup"""
    print("üöÄ CONFIGURA√á√ÉO DO GOOGLE CALENDAR PARA DESENVOLVIMENTO")
    print("=" * 65)
    print("üìß Usando email: gzerbone@gmail.com")
    print("üìÖ Calend√°rio: Agenda Cl√≠nica Teste")
    print()
    
    # Verificar arquivo de conta de servi√ßo
    service_result = check_service_account_file()
    if not service_result:
        return
    
    client_email = service_result[1] if isinstance(service_result, tuple) else None
    
    print()
    
    # Verificar arquivo .env
    env_configured = check_env_file()
    
    print()
    
    if client_email:
        generate_calendar_instructions(client_email)
    
    print("\n" + "=" * 65)
    
    if env_configured and client_email:
        print("üéâ CONFIGURA√á√ÉO COMPLETA!")
        print("‚úÖ Execute: python test_calendar.py")
    else:
        print("üîß CONFIGURA√á√ÉO INCOMPLETA")
        print("üìã Siga as instru√ß√µes acima para finalizar")
    
    print("\nüìö Documenta√ß√£o completa: SETUP_CALENDAR_DESENVOLVIMENTO.md")


if __name__ == "__main__":
    main()
